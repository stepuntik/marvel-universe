{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","useState","process","setProcess","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","getCharacterByName","name","getAllComics","_transformComics","getComic","char","description","slice","fullDescription","thumbnail","path","extension","comics","items","stories","title","writers","creators","length","creator","join","originalSource","urls","language","textObjects","price","prices","Skeleton","className","setContent","Component","Spinner","View","comicAppearance","comicWord","imgStyle","to","RandomChar","setChar","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","then","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setnewItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","arr","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyDown","e","key","pageStart","loadMore","hasMore","initialLoad","loader","useWindow","TransitionGroup","component","renderItems","resourceURI","comicId","valueAfterComics","match","CharInfo","charId","CharSearchForm","errorMessage","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","disabled","ErrorBoundary","state","error","errorInfo","console","log","this","setState","children","MainPage","selectedChar","Helmet","content","decoration"],"mappings":"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","file":"static/js/6.9f8977c4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      style={{\r\n        display: 'block',\r\n        width: '250px',\r\n        height: '250px',\r\n        objectFit: 'contain',\r\n        margin: '0 auto',\r\n      }}\r\n      src={img}\r\n      alt=\"Error\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n  const { request, clearError, process, setProcess } = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=7baff9ba7eb10679bf4c82b8346b3b08';\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(\r\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : 'There is no description for this character',\r\n      fullDescription: char.description\r\n        ? `${char.description}`\r\n        : 'There is no description for this character',\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      comics: char.comics.items,\r\n      stories: char.stories.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      writers:\r\n        comics.creators.items.length > 0\r\n          ? comics.creators.items.map((creator) => creator.name).join(', ')\r\n          : 'Unknown',\r\n      description: comics.description || 'There is no description',\r\n      originalSource: comics.urls[0].url\r\n        ? `${comics.urls[0].url}`\r\n        : 'No information about the original source',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects[0]?.language || 'en-us',\r\n      price: comics.prices[0].price\r\n        ? `${comics.prices[0].price}$`\r\n        : 'Price is not available',\r\n    };\r\n  };\r\n\r\n  return {\r\n    clearError,\r\n    process,\r\n    setProcess,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getCharacterByName,\r\n    getAllComics,\r\n    getComic,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState('waiting');\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = 'GET',\r\n      body = null,\r\n      headers = { 'Content-Type': 'application/json' }\r\n    ) => {\r\n      setProcess('loading');\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        return data;\r\n      } catch (error) {\r\n        setProcess('error');\r\n        throw error;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess('loading');\r\n  }, []);\r\n\r\n  return { request, clearError, process, setProcess };\r\n};\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n  return (\n    <>\n      <p className=\"char__search-label\">\n        Or select a character to see information\n      </p>\n      <div className=\"skeleton\">\n        <div className=\"pulse skeleton__header\">\n          <div className=\"pulse skeleton__circle\"></div>\n          <div className=\"pulse skeleton__mini\"></div>\n        </div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n      </div>\n    </>\n  );\n};\n\nexport default Skeleton;\n","import ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\nimport Spinner from '../components/spinner/Spinner';\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case 'waiting':\r\n      return <Skeleton />;\r\n    case 'loading':\r\n      return <Spinner />;\r\n    case 'confirmed':\r\n      return <Component data={data} />;\r\n    case 'error':\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error('Unexpected process state');\r\n  }\r\n};\r\n\r\nexport default setContent;\r\n","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nimport './randomChar.scss';\n\nconst RandomChar = () => {\n  const [char, setChar] = useState(null);\n\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    const timerId = setInterval(updateChar, 600000);\n\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []); //eslint-disable-line\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n    getCharacter(id)\n      .then(onCharLoaded)\n      .then(() => setProcess('confirmed'));\n  };\n\n  return (\n    <div className=\"randomchar\">\n      {setContent(process, View, char)}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know them better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button onClick={updateChar} className=\"button button__main\">\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({ data }) => {\n  const { id, name, thumbnail, comics } = data;\n\n  let comicAppearance;\n\n  if (comics.length === 0) {\n    comicAppearance = `Hmm, ${name} did not appear in any comics! That's odd...`;\n  } else {\n    const comicWord = comics.length > 1 ? 'comics' : 'comic';\n    comicAppearance = `Nice! ${name} appeared in ${comics.length} Marvel ${comicWord}!`;\n  }\n\n  let imgStyle = { objectFit: 'cover' };\n  if (\n    thumbnail ===\n    'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n  ) {\n    imgStyle = { objectFit: 'contain' };\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img\n        src={thumbnail}\n        alt=\"Random character\"\n        className=\"randomchar__img\"\n        style={imgStyle}\n      />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{comicAppearance}</p>\n        <div className=\"randomchar__btns\">\n          <Link to={`/characters/${id}`} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport InfiniteScroll from 'react-infinite-scroller';\n\nimport useMarvelService from '../../services/MarvelService';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case 'waiting':\n      return <Spinner />;\n    case 'loading':\n      return newItemLoading ? <Component /> : <Spinner />;\n    case 'confirmed':\n      return <Component />;\n    case 'error':\n      return <ErrorMessage />;\n    default:\n      throw new Error('Unexpected process state');\n  }\n};\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setnewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const { getAllCharacters, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []); //eslint-disable-line react-hooks/exhaustive-deps\n\n  const onRequest = (offset, initial) => {\n    if (newItemLoading) return;\n\n    initial ? setnewItemLoading(false) : setnewItemLoading(true);\n    getAllCharacters(offset)\n      .then(onCharListLoaded)\n      .then(() => setProcess('confirmed'));\n  };\n\n  const onCharListLoaded = (newCharList) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n    setCharList([...charList, ...newCharList]);\n    setOffset(offset + 9);\n    setCharEnded(ended);\n    setnewItemLoading(false);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n    itemRefs.current.forEach((item) =>\n      item.classList.remove('char__item_selected')\n    );\n    itemRefs.current[id].classList.add('char__item_selected');\n    itemRefs.current[id].focus();\n  };\n\n  const renderItems = (arr) => {\n    const items = arr.map((item, i) => {\n      let imgStyle = { objectFit: 'cover' };\n      if (\n        item.thumbnail ===\n        'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n      ) {\n        imgStyle = { objectFit: 'unset' };\n      }\n\n      return (\n        <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n          <li\n            className=\"char__item\"\n            tabIndex={0}\n            ref={(el) => (itemRefs.current[i] = el)}\n            onClick={() => {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }}\n            onKeyDown={(e) => {\n              if (e.key === ' ' || e.key === 'Enter') {\n                props.onCharSelected(item.id);\n                focusOnItem(i);\n              }\n            }}\n          >\n            <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n            <div className=\"char__name\">{item.name}</div>\n          </li>\n        </CSSTransition>\n      );\n    });\n\n    return (\n      <InfiniteScroll\n        pageStart={0}\n        loadMore={() => onRequest(offset)}\n        hasMore={!charEnded}\n        initialLoad={false}\n        loader={<Spinner key={0} />}\n        useWindow={true}\n      >\n        <ul className=\"char__grid\">\n          <TransitionGroup component={null}>{items}</TransitionGroup>\n        </ul>\n      </InfiniteScroll>\n    );\n  };\n\n  const elements = useMemo(() => {\n    return setContent(process, () => renderItems(charList), newItemLoading);\n  }, [process]); //eslint-disable-line react-hooks/exhaustive-deps\n\n  return <div className=\"char__list\">{elements}</div>;\n};\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = ({ charId }) => {\n  const [char, setChar] = useState(null);\n\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n  const updateChar = () => {\n    if (!charId) {\n      return;\n    }\n\n    clearError();\n    getCharacter(charId)\n      .then(onCharLoaded)\n      .then(() => setProcess('confirmed'));\n  };\n\n  useEffect(() => {\n    updateChar();\n  }, [charId]); //eslint-disable-line react-hooks/exhaustive-deps\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  return (\n    <div className=\"char__info char__info--fixed\">\n      {setContent(process, View, char)}\n    </div>\n  );\n};\n\nconst View = ({ data }) => {\n  const { id, name, thumbnail, comics } = data;\n\n  let imgStyle = { objectFit: 'cover' };\n  if (\n    thumbnail ===\n    'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n  ) {\n    imgStyle = { objectFit: 'contain' };\n  }\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <Link to={`/characters/${id}`} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </Link>\n          </div>\n        </div>\n      </div>\n      <h3 className=\"char__comics\">\n        See what comics you can find me in below!\n      </h3>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : 'No comics with this character found'}\n        {comics.map((item, i) => {\n          if (item.resourceURI) {\n            let comicId;\n\n            const valueAfterComics = item.resourceURI.match(/comics\\/(\\d+)/);\n\n            if (valueAfterComics) {\n              comicId = valueAfterComics[1];\n            }\n            return (\n              <Link\n                key={comicId}\n                to={`/comics/${comicId}`}\n                className=\"char__comics-item\"\n              >\n                <li>{item.name}</li>\n              </Link>\n            );\n          } else return null;\n        })}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { useState } from 'react';\r\nimport {\r\n  Formik,\r\n  Form,\r\n  Field,\r\n  ErrorMessage as FormikErrorMessage,\r\n} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n  const [char, setChar] = useState(null);\r\n  const { getCharacterByName, clearError, process, setProcess } =\r\n    useMarvelService();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updateChar = (name) => {\r\n    clearError();\r\n\r\n    getCharacterByName(name)\r\n      .then(onCharLoaded)\r\n      .then(() => {\r\n        setProcess('confirmed');\r\n      });\r\n  };\r\n\r\n  const errorMessage =\r\n    process === 'error' ? (\r\n      <div className=\"char__search-critical-error\">\r\n        <ErrorMessage />\r\n      </div>\r\n    ) : null;\r\n  const results = !char ? null : char.length > 0 ? (\r\n    <div className=\"char__search-wrapper\">\r\n      <div className=\"char__search-success\">\r\n        Found! Visit {char[0].name} page?\r\n      </div>\r\n      <Link\r\n        to={`/characters/${char[0].id}`}\r\n        className=\"button button__secondary\"\r\n      >\r\n        <div className=\"inner\">To page</div>\r\n      </Link>\r\n    </div>\r\n  ) : (\r\n    <div className=\"char__search-error\">\r\n      The character was not found. Check the name and try again\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"char__search-form\">\r\n      <Formik\r\n        initialValues={{\r\n          charName: '',\r\n        }}\r\n        validationSchema={Yup.object({\r\n          charName: Yup.string().required('This field is required'),\r\n        })}\r\n        onSubmit={({ charName }) => {\r\n          updateChar(charName);\r\n        }}\r\n      >\r\n        <Form>\r\n          <label className=\"char__search-label\" htmlFor=\"charName\">\r\n            Find a character by name:\r\n          </label>\r\n          <div className=\"char__search-wrapper\">\r\n            <Field\r\n              id=\"charName\"\r\n              name=\"charName\"\r\n              type=\"text\"\r\n              placeholder=\"Enter name\"\r\n            />\r\n            <button\r\n              type=\"submit\"\r\n              className=\"button button__main\"\r\n              disabled={process === 'loading'}\r\n            >\r\n              <div className=\"inner\">find</div>\r\n            </button>\r\n          </div>\r\n          <FormikErrorMessage\r\n            component=\"div\"\r\n            className=\"char__search-error\"\r\n            name=\"charName\"\r\n          />\r\n        </Form>\r\n      </Formik>\r\n      {results}\r\n      {errorMessage}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharSearchForm;\r\n","import { Component } from 'react';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport RandomChar from '../randomChar/RandomChar';\r\nimport CharList from '../charList/CharList';\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\" content=\"Marvel information portal\" />\r\n        <title>Marvel Information Portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharList onCharSelected={onCharSelected} />\r\n          </ErrorBoundary>\r\n        </div>\r\n        <div className=\"char__info--fixed\">\r\n          <ErrorBoundary>\r\n            <CharSearchForm />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar} />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n"],"sourceRoot":""}